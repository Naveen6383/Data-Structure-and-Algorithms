class Solution {
int[] left;
int[] right;

    void mergeSort(int arr[], int l, int r) {
        if(l<r)
        {
            int m = l + (r-l)/2;
            
            mergeSort(arr, l, m);
            mergeSort(arr, m+1, r);
        
            left = new int[m-l+1];
            right = new int[r-m];
            
            merge(arr,l,m,r,left,right);
        }
    }
    
    void merge(int arr[],int l,int m,int r,int left[],int right[])
    {
        int n1 = m-l+1;
        int n2 = r-m;
        
        for(int i=0;i<n1;i++)
            left[i] = arr[l+i];
            
        for(int i=0;i<n2;i++)
            right[i] = arr[m+i+1];
        
        int k = l;
        int j = 0;
        int i = 0;
            
        
        while(i<n1 && j<n2)
        {
            if(left[i] < right[j])
                arr[k++] = left[i++];
            else
                arr[k++] = right[j++];
        }
        
        while (i<n1)
            arr[k++] = left[i++];
            
        while (j<n2)
            arr[k++] = right[j++];
    }
}


/*Merge Sort is a divide-and-conquer algorithm. It divides the input array into two halves, 
calls itself the two halves, and then merges the two sorted halves. 
The merge() function is used for merging two halves.*/
